broad cast
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int a[10][10],n;
int main()
{
int i,j,root;
clrscr();
printf("Enter no.of nodes:");
scanf("%d",&n);
printf("Enter adjacent matrix\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
{
printf("Enter connecting of %dâ€“>%d::",i,j);
scanf("%d",&a[i][j]);
}
printf("Enter root node:");
scanf("%d",&root);
adj(root);
}
adj(int k)
{
int i,j;
printf("Adjacent node of root node::\n");
printf("%d\n\n",k);
for(j=1;j<=n;j++)
{
if(a[k][j]==1 || a[j][k]==1)
printf("%d\t",j);
}
printf("\n");
for(i=1;i<=n;i++)
{
if((a[k][j]==0) && (a[i][k]==0) && (i!=k))
printf("%d",i);
}
}
crc
#include <stdio.h>
#include <string.h>
#define N strlen(g)
char t[28],cs[28],g[28];
int a,e,c,b;
void xor()
{
for(c=1;c<N;c++)
cs[c]=((cs[c]==g[c])?'0':'1');
}
void crc()
{
for(e=0;e<N;e++)
cs[e]=t[e];
do
{
if(cs[0]=='1')
xor();
for(c=0;c<N-1;c++)
cs[c]=cs[c+1];
cs[c]=t[e++];
}while(e<=a+N-1);
}
int main()
{
int flag=0;
do{
printf("\n1.crc12\n2.crc16\n3.crc ccit\n4.exit\n\nEnter your option.");
scanf("%d",&b);
switch(b)
{
case 1:strcpy(g,"1100000001111");
break;
case 2:strcpy(g,"11000000000000101");
break;
case 3:strcpy(g,"10001000000100001");
break;
case 4:return 0;
}
printf("\n enter data:");
scanf("%s",t);
printf("\n-----------------------\n");
printf("\n generating polynomial:%s",g);
a=strlen(t);
for(e=a;e<a+N-1;e++)
t[e]='0';
printf("\n--------------------------\n");
printf("mod-ified data is:%s",t);
printf("\n-----------------------\n");
crc();
printf("checksum is:%s",cs);
for(e=a;e<a+N-1;e++)
t[e]=cs[e-a];
printf("\n-----------------------\n");
printf("\n final codeword is : %s",t);
printf("\n------------------------\n");
printf("\ntest error detection 0(yes) 1(no)?:");
scanf("%d",&e);
if(e==0)
{
do{
printf("\n\tenter the position where error is to be inserted:");
scanf("%d",&e);
}
while(e==0||e>a+N-1);
t[e-1]=(t[e-1]=='0')?'1':'0';
printf("\n-----------------------\n");
printf("\n\terroneous data:%s\n",t);
}
crc();
for(e=0;(e<N-1)&&(cs[e]!='1');e++);
if(e<N-1)
printf("error detected\n\n");
else
printf("\n no error detected \n\n");
printf("\n-----------------------");
}while(flag!=1);
}
bsc
class BSC
{
static void bitstuffing(int N,int arr[])
{
int []brr=new int[30];
int i,j,k;
i=0;j=0;
int count=1;
while(i<N)
{
if(arr[i]==1)
{
brr[j]=arr[i];
for(k=i+1;k<N && arr[k]==1 && count<5;k++)
{
j++;
brr[j]=arr[k];
count++;
if(count == 5)
{
j++;
brr[j]=0;
}
i=k;
}
}
else
{
brr[j]=arr[i];
}
i++;
j++;
}
for(i=0;i<j;i++)
System.out.printf("%d",brr[i]);
}
public static void main(String args[])
{
int N=6;
int arr[]={1,1,1,1,1,1};
bitstuffing(N,arr);
}
}
char
import java.util.*;
class Char
{
public static void main(String args[])
{
Scanner sc=new Scanner(System.in);
System.out.println("enter no. of characters :");
int n=sc.nextInt();
String in[]=new String[n];
for(int i=0;i<n;i++)
{
in[i]=sc.next();
}
for(int i=0;i<n;i++)
{
if(in[i].equals("dle"))
{
in[i]="dledle";
}
}
System.out.println("Transmitted msg:");
System.out.print("dlestx");
for(int i=0;i<n;i++)
{
System.out.print(in[i]+"");
}
System.out.println("dleetx");
}
}
dijkstra
public class Dijkstra {
  public static void dijkstra(int[][] graph, int source) {
    int count = graph.length;
    boolean[] visitedVertex = new boolean[count];
    int[] distance = new int[count];
    for (int i = 0; i < count; i++) {
      visitedVertex[i] = false;
      distance[i] = Integer.MAX_VALUE;
    }
distance[source] = 0;
    for (int i = 0; i < count; i++) {
      int u = findMinDistance(distance, visitedVertex);
      visitedVertex[u] = true;
      for (int v = 0; v < count; v++) {
        if (!visitedVertex[v] && graph[u][v] != 0 && (distance[u] + graph[u][v] < distance[v])) {
          distance[v] = distance[u] + graph[u][v];
        }
      }
    }
    for (int i = 0; i < distance.length; i++) {
      System.out.println(String.format("Distance from %s to %s is %s", source, i, distance[i]));
    }

  }
  private static int findMinDistance(int[] distance, boolean[] visitedVertex) {
    int minDistance = Integer.MAX_VALUE;
    int minDistanceVertex = -1;
    for (int i = 0; i < distance.length; i++) {
      if (!visitedVertex[i] && distance[i] < minDistance) {
        minDistance = distance[i];
        minDistanceVertex = i;
      }
    }
    return minDistanceVertex;
  }
public static void main(String[] args) {
    int graph[][] = new int[][] { { 0, 0, 1, 2, 0, 0, 0 }, { 0, 0, 2, 0, 0, 3, 0 }, { 1, 2, 0, 1, 3, 0, 0 },
        { 2, 0, 1, 0, 0, 0, 1 }, { 0, 0, 3, 0, 0, 2, 0 }, { 0, 3, 0, 0, 2, 0, 1 }, { 0, 0, 0, 1, 0, 1, 0 } };
    Dijkstra T = new Dijkstra();
    T.dijkstra(graph, 0);
  }
}
hamming
class Hammingcode
{
static void print(int ar[])
{
for(int i=1;i<ar.length;i++)
{
System.out.println(ar[i]);
}
System.out.println();
}
static int[] calculation(int[] ar,int r)
{
for(int i=0;i<r;i++)
{
int x=(int)Math.pow(2,i);
for(int j=1;j<ar.length;j++)
{
if(((j>>i)&1)==1)
{
if(x!=j)
ar[x]=ar[x]^ar[j];
}
}
System.out.println("r"+x+"="+ar[x]);
}
return ar;
}
static int[] generatecode(String str,int M,int r)
{
int[] ar=new int[r+M+1];
int j=0;
for(int i=1;i<ar.length;i++)
{
if((Math.ceil(Math.log(i)/Math.log(2))-Math.floor(Math.log(i)/Math.log(2)))==0)
{
ar[i]=0;
}
else
{
ar[i]=(int)(str.charAt(j)-'0');
j++;
}
}
return ar;
}
public static void main(String[] args)
{
String str="0101";
int M=str.length();
int r=1;
while(Math.pow(2,r)<(M+r+1))
{
r++;
}
int[] ar=generatecode(str,M,r);
System.out.println("generated hamming code");
ar=calculation(ar,r);
print(ar);
}
}
mac address
import java.net.*;
import java.util.Scanner;
public class MacAddress
{
public static void main(String args[])
{
try
{
Scanner console=new Scanner(System.in);
System.out.println("Enter System Name:");
String ipaddr=console.nextLine();
InetAddress address=InetAddress.getByName(ipaddr);
System.out.println("Address="+address);
NetworkInterface ni=NetworkInterface.getByInetAddress(address);
if(ni!=null)
{
byte[] mac=ni.getHardwareAddress();
if(mac!=null)
{
System.out.print("Mac Address:");
for(int i=0;i<mac.length;i++)
{
System.out.format("%02X%s",mac[i],(i<mac.length-1)? " ":" ");
}
}
else
{
System.out.println("Address doesnot exist or is not Accessible/");
}
}
else
{
System.out.println("Network interface for the specified address is not found");
}
}
catch(UnknownHostException | SocketException e)
{
}
}
}
my client
import java.io.*;
import java.net.*;
public class MyClient
{
piblic static void main(String[] args)
{
try{
serversocket ss=new serversocket(6666);
DataInputstream dis=new DataInputStream(s.getInputStream());
dout.writeUTF("Hello server");
dout.flush();jacaj
dout.close();
s.close();
}catch(Exception e){System.out.println(e);}
}
}

my server
import java.io.*;
import java.net.*;
public class MyServer
{
public static void main(String[] args)
{
try{
serversocket ss=new serversocket(6666);
socket s=ss.accept();
DataInputstream dis=new DataInputStream(s.getInputStream());
string str=(string)dis.readUTF();
System.out.println("message="+str);
ss.close();
}catch(Exception e){System.out.println(e);}
}
}
sw receiver
import java.io.*;                                                                                                                                       import java.io.*;
import java.net.*;
public class SWreciever
{
ServerSocket reciever;
Socket connection=null;
ObjectOutputStream out;
ObjectInputStream in;
String packet,ack,data="";
int i=0,sequence=0;
SWreciever(){}
public void run()
{
try
{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
reciever = new ServerSocket(2004,10);
System.out.println("waiting for connection...");
connection=reciever.accept();
sequence=0;
System.out.println("Connection established :");
out=new ObjectOutputStream(connection.getOutputStream());
out.flush();
in=new ObjectInputStream(connection.getInputStream());
out.writeObject("connected .");
do{
try
{
packet=(String)in.readObject();
if(Integer.valueOf(packet.substring(0,1))==sequence)
{
data+=packet.substring(1);
sequence=(sequence==0)?1:0;
System.out.println("\n\nreceiver >"+packet);
}
else
{
System.out.println("\n\nreceiver >"+packet +" duplicate data");
}
if(i<3)
{
out.writeObject(String.valueOf(sequence));
i++;
}
else
{
out.writeObject(String.valueOf((sequence+1)%2));
i=0;
}
}
catch(Exception e){}
}
while(!packet.equals("end"));
System.out.println("Data recived="+data);
out.writeObject("connection ended .");
}
catch(Exception e){}
finally
{
try
{
in.close();
out.close();
reciever.close();
}
catch(Exception e){}
}
}
public static void main(String args[])
{
SWreciever s=new SWreciever();
while(true)
{
s.run();
}
}
}


sw sender
import java.io.*;
import java.net.*;
public class SWsender
{
Socket sender;
ObjectOutputStream out;
ObjectInputStream in;
String packet,ack,str, msg;int n,i=0,sequence=0;
SWsender()
{}
public void run()
{
try
{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
System.out.println("Waiting for Connection....");
sender = new Socket("localhost",2004);
sequence=0;
out=new ObjectOutputStream(sender.getOutputStream());
out.flush();
in=new ObjectInputStream(sender.getInputStream());
str=(String)in.readObject();
System.out.println("reciver > "+str);
System.out.println("Enter the data to send....");
packet=br.readLine();
n=packet.length();
do
{
try
{
if(i<n)
{
msg=String.valueOf(sequence);
msg=msg.concat(packet.substring(i,i+1));
}
else if(i==n)
{
msg="end";
out.writeObject(msg);
break;
}
out.writeObject(msg);
sequence=(sequence==0)?1:0;out.flush();
System.out.println("data sent>"+msg);
ack=(String)in.readObject();
System.out.println("waiting for ack.....\n\n");
if(ack.equals(String.valueOf(sequence)))
{
i++;
System.out.println("receiver > "+" packet recieved\n\n");
}
else
{
System.out.println("Time out resending data....\n\n");
sequence=(sequence==0)?1:0;
}
}
catch(Exception e)
{
}
}
while(i<n+1);
System.out.println("All data sent. exiting.");
}
catch(Exception e)
{
}
finally
{
try
{
in.close();
out.close();
sender.close();
}
catch(Exception e)
{
}
}
}
public static void main(String args[])
{SWsender s=new SWsender();
s.run();
}
}
udp client

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Scanner;

public class UdpBaseClient
{
	public static void main(String args[]) throws IOException
	{
		Scanner sc = new Scanner(System.in);

		DatagramSocket ds = new DatagramSocket();

		InetAddress ip = InetAddress.getLocalHost();
		byte buf[] = null;

		while (true)
		{
			String inp = sc.nextLine();

			buf = inp.getBytes();

			
			DatagramPacket DpSend =
				new DatagramPacket(buf, buf.length, ip, 1234);

			ds.send(DpSend);
			if (inp.equals("bye"))
				break;
		}
	}
}
udp server
// Java program to illustrate Server side
// Implementation using DatagramSocket
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

public class UdpBaseServer
{
	public static void main(String[] args) throws IOException
	{
		// Step 1 : Create a socket to listen at port 1234
		DatagramSocket ds = new DatagramSocket(1234);
		byte[] receive = new byte[65535];

		DatagramPacket DpReceive = null;
		while (true)
		{

			// Step 2 : create a DatgramPacket to receive the data.
			DpReceive = new DatagramPacket(receive, receive.length);

			// Step 3 : revieve the data in byte buffer.
			ds.receive(DpReceive);

			System.out.println("Client:-" + data(receive));

			// Exit the server if the client sends "bye"
			if (data(receive).toString().equals("bye"))
			{
				System.out.println("Client sent bye.....EXITING");
				break;
			}

			// Clear the buffer after every message.
			receive = new byte[65535];
		}
	}

	// A utility method to convert the byte array
	// data into a string representation.
	public static StringBuilder data(byte[] a)
	{
		if (a == null)
			return null;
		StringBuilder ret = new StringBuilder();
		int i = 0;
		while (a[i] != 0)
		{
			ret.append((char) a[i]);
			i++;
		}
		return ret;
	}
}
